<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-21T09:55:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">in limbo</title><subtitle>nothing much</subtitle><author><name>segyoung</name><email>sseymorrr@gmail.com</email></author><entry><title type="html">[Dart] Dart에서 Isolates(아이솔레이트) 사용하기</title><link href="http://localhost:4000/flutter/dart/isolates-example-in-dart/" rel="alternate" type="text/html" title="[Dart] Dart에서 Isolates(아이솔레이트) 사용하기" /><published>2024-06-21T00:00:00+09:00</published><updated>2024-06-21T00:00:00+09:00</updated><id>http://localhost:4000/flutter/dart/isolates-example-in-dart</id><content type="html" xml:base="http://localhost:4000/flutter/dart/isolates-example-in-dart/"><![CDATA[<h2 id="1️⃣-개요">1️⃣ 개요</h2>
<p>현재 진행하고 있는 프로젝트에서 1. 위치 정보를 가져옴 2. 가져온 위치정보를 Request로 API를 호출한 뒤 특정 화면에 진입하는 로직이 있음</p>

<p>그런데 이 위치 정보를 가져오는 과정이 오래 걸려서 <del>(사실 난 잘 모르겠지만 어쨌든)</del> 이 작업을 메인 UI 스레드가 아닌 백그라운드 스레드로 동작시키라는 업무를 지시 받음</p>

<p><strong>결론은 성능에 큰 차이는 없었고</strong> (내가 보기엔 너무 작은 태스크라서 그런 것 같다) 체감상 더 느려진 것 같은 기분이었는데, 아직도 이 부분을 더 좋은 코드로 빠르게 동작시키려면 어떻게 해야하는 지 고민이 필요함…</p>

<blockquote>
  <p>참고로 Dart에서 비동기 프로그래밍에 관한 포스팅은 <a href="https://sseymorr.github.io/flutter/dart/concurrency-in-dart-1/">여기를 클릭</a>하시면 확인할 수 있음!</p>
</blockquote>

<h2 id="2️⃣-pubspecyaml-세팅">2️⃣ pubspec.yaml 세팅</h2>
<p>위치 정보를 가져오기 위해 geolocator 라이브러리를 사용 <a href="https://pub.dev/packages/geolocator">Flutter geolocator</a></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="na">dependencies</span><span class="pi">:</span>
    <span class="na">geolocator</span><span class="pi">:</span> <span class="s">^12.0.0</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="3️⃣-아이솔레이트-클래스-생성">3️⃣ 아이솔레이트 클래스 생성</h2>
<p>백그라운드 스레드 작업을 수행해야하는 화면에서 private으로 아이솔레이트 클래스를 생성</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">_IsolateData</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">RootIsolateToken</span> <span class="n">token</span><span class="p">;</span>
    <span class="kd">final</span> <span class="kt">Function</span> <span class="n">fuction</span><span class="p">;</span>
    <span class="kd">final</span> <span class="n">SendPort</span> <span class="n">answerPort</span><span class="p">;</span>

    <span class="n">_IsolateData</span><span class="p">({</span>
        <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">token</span><span class="p">,</span>
        <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">function</span><span class="p">,</span>
        <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">answerPort</span><span class="p">,</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="n">Future</span><span class="p">&lt;</span><span class="kd">dynamic</span><span class="p">&gt;</span> <span class="n">computeIsolate</span><span class="p">(</span><span class="n">Future</span> <span class="kt">Function</span><span class="p">()</span> <span class="n">function</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">receivePort</span> <span class="o">=</span> <span class="n">ReceivePort</span><span class="p">();</span>
  <span class="kd">var</span> <span class="n">rootToken</span> <span class="o">=</span> <span class="n">RootIsolateToken</span><span class="o">.</span><span class="na">instance</span><span class="o">!</span><span class="p">;</span>
  <span class="k">await</span> <span class="n">Isolate</span><span class="o">.</span><span class="na">spawn</span><span class="p">&lt;</span><span class="n">_IsolateData</span><span class="p">&gt;(</span>
    <span class="n">_isolateEntry</span><span class="p">,</span>
    <span class="n">_IsolateData</span><span class="p">(</span>
      <span class="nl">token:</span> <span class="n">rootToken</span><span class="p">,</span>
      <span class="nl">function:</span> <span class="n">function</span><span class="p">,</span>
      <span class="nl">answerPort:</span> <span class="n">receivePort</span><span class="o">.</span><span class="na">sendPort</span><span class="p">,</span>
    <span class="p">),</span>
  <span class="p">);</span>
  <span class="k">return</span> <span class="k">await</span> <span class="n">receivePort</span><span class="o">.</span><span class="na">first</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">_isolateEntry</span><span class="p">(</span><span class="n">_IsolateData</span> <span class="n">isolateData</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="n">BackgroundIsolateBinaryMessenger</span><span class="o">.</span><span class="na">ensureInitialized</span><span class="p">(</span><span class="n">isolateData</span><span class="o">.</span><span class="na">token</span><span class="p">);</span>
  <span class="kd">final</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">await</span> <span class="n">isolateData</span><span class="o">.</span><span class="na">function</span><span class="p">();</span>
  <span class="n">isolateData</span><span class="o">.</span><span class="na">answerPort</span><span class="o">.</span><span class="na">send</span><span class="p">(</span><span class="n">answer</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="4️⃣-아이솔레이트-작업-수행">4️⃣ 아이솔레이트 작업 수행</h2>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">Position</span> <span class="n">position</span> <span class="o">=</span> <span class="k">await</span> <span class="n">computeIsolate</span><span class="p">(</span><span class="n">_getCurrentPosition</span><span class="p">);</span>

<span class="kd">static</span> <span class="n">Future</span><span class="p">&lt;</span><span class="n">Position</span><span class="p">&gt;</span> <span class="n">_getCurrentPosition</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">position</span> <span class="o">=</span> <span class="k">await</span> <span class="n">LocationManager</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">position</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">LocationManager</span> <span class="p">{</span>
  <span class="n">LocationManager</span><span class="o">.</span><span class="na">_</span><span class="p">();</span>

  <span class="kd">static</span> <span class="kd">final</span> <span class="n">LocationManager</span> <span class="n">_instance</span> <span class="o">=</span> <span class="n">LocationManager</span><span class="o">.</span><span class="na">_</span><span class="p">();</span>

  <span class="kd">static</span> <span class="n">LocationManager</span> <span class="kd">get</span> <span class="n">instance</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_instance</span><span class="p">;</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">checkLocationPermission</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">serviceEnabled</span><span class="p">;</span>
    <span class="n">LocationPermission</span> <span class="n">permission</span><span class="p">;</span>

    <span class="n">serviceEnabled</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">isLocationServiceEnabled</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">serviceEnabled</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">permission</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">checkPermission</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">always</span> <span class="o">||</span>
        <span class="n">permission</span> <span class="o">==</span> <span class="n">LocationPermission</span><span class="o">.</span><span class="na">whileInUse</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="n">Position</span><span class="p">&gt;</span> <span class="n">getCurrentPosition</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="n">Geolocator</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="p">(</span>
        <span class="nl">desiredAccuracy:</span> <span class="n">LocationAccuracy</span><span class="o">.</span><span class="na">best</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-참고-링크">🔗 참고 링크</h2>
<ul>
  <li><a href="https://stackoverflow.com/questions/75950122/flutter-isolates-the-backgroundisolatebinarymessenger-instance-value-is-invalid">Flutter Isolates: The BackgroundIsolateBinaryMessenger.instance value is invalid until BackgroundIsolateBinaryMessenger.ensureInitialized is executed</a></li>
</ul>]]></content><author><name>segyoung</name><email>sseymorrr@gmail.com</email></author><category term="[&quot;flutter&quot;, &quot;dart&quot;]" /><summary type="html"><![CDATA[Dart에서 Isolates(아이솔레이트)를 사용하여 위치 정보를 가져오는 작업을 수행하기]]></summary></entry><entry><title type="html">[Dart] Dart의 비동기 프로그래밍</title><link href="http://localhost:4000/flutter/dart/concurrency-in-dart-1/" rel="alternate" type="text/html" title="[Dart] Dart의 비동기 프로그래밍" /><published>2024-06-02T00:00:00+09:00</published><updated>2024-06-02T00:00:00+09:00</updated><id>http://localhost:4000/flutter/dart/concurrency-in-dart-1</id><content type="html" xml:base="http://localhost:4000/flutter/dart/concurrency-in-dart-1/"><![CDATA[<p align="center"><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/7c4352cd-e25f-4d4d-ac81-487b48ceb5d3" /></p>

<p>지금 하고 있는 프로젝트에서 백그라운드에서 일정 시간마다 위치 정보를 가져와 API를 호출하는 기능을 구현해야 하는데 일단 <em>“돌아가게만 해보자!”</em> 하는 심정으로 있는 써드 파티 라이브러리는 다 적용해봤단 말임?</p>

<p>근데 마땅한 해결책이 나오지 않아서 답답해 미치겠는 와중에 공부하는 겸 일단 비동기부터 정리하는 게 낫겠다 싶어서 공식 문서부터 차근차근 읽어보기로 함</p>

<p>잘못된 부분은 언제든지 피드백 댓글 남겨주세요!</p>

<p class="notice--info">📌 원본 글: <a href="https://dart.dev/language/concurrency">Concurrency in Dart</a></p>
<hr />
<p>이 문서에서는 동시 프로그래밍이 어떻게 동작하는지, 다트에서 제공하는 비동기 API (<code class="language-plaintext highlighter-rouge">async-await</code>, <code class="language-plaintext highlighter-rouge">Future</code>, <code class="language-plaintext highlighter-rouge">Stream</code>)와 프로세스를 분리된 별도의 코어로 이동시킬 수 있는 <code class="language-plaintext highlighter-rouge">Isolates</code>를 다룸</p>

<p>모든 다트 코드는 isolate에서 실행되고 기본 isolate(main isolate)에서 시작해 개발자가 필요에 따라 백그라운드로 실행하고 싶은 작업을 worker isolate로 만들어 백그라운드 작업을 수행할 수 있음</p>

<p><span style="background-color:#DCFFE4"> 이렇게 새 isolate를 생성하면 해당 isolate는 <strong>1) 자체 메모리 2) 이벤트 루프</strong>를 가지게 되는데, 이 <strong>이벤트 루프</strong>는 <u>다트에서 비동기 및 동시 프로그래밍을 가능하게 하는 핵심 요소</u>임! </span></p>

<p>실용적인 예시를 보고 싶다면 <a href="https://dart.dev/language/async">Asynchrous Support</a>, <a href="https://dart.dev/language/isolates">Isolates</a> 문서를 참고하면 됨~! (요 문서들도 정리할 예정)</p>

<h1 id="1️⃣-이벤트-루프-event-loop">1️⃣ 이벤트 루프 Event Loop</h1>
<h2 id="개념">개념</h2>
<ul>
  <li>개발자가 작성한 프로그램의 코드를 실행하고 이벤트를 실행하는 역할</li>
  <li><strong>Dart의 런타임 모델은 이 이벤트 루프에 기반</strong></li>
</ul>

<h2 id="동작-방식">동작 방식</h2>
<ul>
  <li>모든 이벤트는 <strong>이벤트 큐</strong>에 저장됨
    <ul>
      <li>이벤트의 예시: UI를 다시 그림 / 사용자가 화면을 터치 / 파일 입출력 등</li>
    </ul>
  </li>
  <li>앱은 이러한 이벤트들이 일어날 순서를 예측할 수 없기 때문에 이벤트들을 큐에 넣어놓고 큐에 들어온 <strong>순서대로</strong> 이벤트를 <strong>하나씩</strong> 처리</li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/062c9d70-c257-4db0-a94c-86d2bf6dc232" alt="Screenshot 2024-06-02 at 2 31 30 PM" /></p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">while</span> <span class="p">(</span><span class="n">eventQueue</span><span class="o">.</span><span class="na">waitForEvent</span><span class="p">())</span> <span class="p">{</span>
  <span class="n">eventQueue</span><span class="o">.</span><span class="na">processNextEvent</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="이벤트-루프-모델의-동기적-특징">이벤트 루프 모델의 동기적 특징</h2>
<p>앞에서 설명한 동작 방식에 따르면 이벤트 루프 자체는 동기적이며 단일 스레드에서 돌아간다는 것을 알 수 있는데 <strong>그렇지만…</strong> 앱들은 동시에 여러가지 일을 처리해야 함</p>

<p><u>사용자가 어떤 버튼을 누르는 이벤트를 처리하는 동시에 http 요청들을 처리해야 하는 경우</u> 이런 비동기적인 처리를 위해서 Dart는 여러가지 비동기 API들을 제공함 (<a href="https://dart.dev/language/async">Futures, Streams, and async-await</a>)
→ 이벤트 루프의 ‘동기적 특징’을 해결하기 위해 설계됨</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">http</span><span class="o">.</span><span class="na">get</span><span class="p">(</span><span class="s">'https://example.com'</span><span class="p">)</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'Success!'</span><span class="p">)</span><span class="s">'
  }  
}
</span></pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>이 코드는 그럼 어떻게 이벤트 루프에서 비동기적으로 동작하는 걸까?
    <ul>
      <li>이벤트 루프에서 실행되면 <code class="language-plaintext highlighter-rouge">http.get</code>을 호출하고 즉시 <code class="language-plaintext highlighter-rouge">Future</code>을 반환</li>
      <li><code class="language-plaintext highlighter-rouge">Future</code>을 반환하면서 이벤트 루프에게 “http 요청이 처리될 때까지 <code class="language-plaintext highlighter-rouge">then()</code>에서 기다리라”고 알려줌</li>
      <li>http 요청이 처리되면 처리 결과를 인자로 전달하며 <code class="language-plaintext highlighter-rouge">then()</code> 내부에 있는 콜백 부분을 실행</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/73b7787f-8107-4a6d-aef7-3865bd59b9d7" alt="Screenshot 2024-06-02 at 2 43 37 PM" /></p>

<center>⬆️ 이러한 모델이 일반적으로 다트에서 비동기 이벤트들을 처리하는 방식임 </center>

<h1 id="2️⃣-비동기-프로그래밍-하는-법-3가지">2️⃣ 비동기 프로그래밍 하는 법 (3가지)</h1>

<h2 id="1-futures">1. Futures</h2>
<ul>
  <li>값 또는 오류가 비동기 처리의 결과일 때 사용</li>
  <li>아래 코드는 <code class="language-plaintext highlighter-rouge">Future&lt;String&gt;</code>은 비동기 처리의 결과로 <code class="language-plaintext highlighter-rouge">String</code>값이 나올 것이라는 걸 나타냄</li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="n">Future</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span> <span class="n">_readFileAsync</span><span class="p">(</span><span class="kt">String</span> <span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>

  <span class="c1">// .readAsString() returns a Future.</span>
  <span class="c1">// .then() registers a callback to be executed when `readAsString` resolves.</span>
  <span class="k">return</span> <span class="n">file</span><span class="o">.</span><span class="na">readAsString</span><span class="p">()</span><span class="o">.</span><span class="na">then</span><span class="p">((</span><span class="n">contents</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">contents</span><span class="o">.</span><span class="na">trim</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="2-the-async-await-syntax-async-await-구문">2. The async-await syntax (async-await 구문)</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">async-await</code> 키워드는 비동기 함수를 정의하고 비동기의 결과를 사용하겠다고 선언하는 것을 말함</li>
  <li>예1) 파일 입출력이 완료될 때까지 기다리는 동기적인 코드</li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="kt">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">'with_keys.json'</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Read some data.</span>
  <span class="kd">final</span> <span class="n">fileData</span> <span class="o">=</span> <span class="n">_readFileSync</span><span class="p">();</span>
  <span class="kd">final</span> <span class="n">jsonData</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">fileData</span><span class="p">);</span>

  <span class="c1">// Use that data.</span>
  <span class="n">print</span><span class="p">(</span><span class="s">'Number of JSON keys: </span><span class="si">${jsonData.length}</span><span class="s">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">String</span> <span class="nf">_readFileSync</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
  <span class="kd">final</span> <span class="n">contents</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">readAsStringSync</span><span class="p">();</span>
  <span class="k">return</span> <span class="n">contents</span><span class="o">.</span><span class="na">trim</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>예2) 예1과 비슷한 코드이지만 비동기적으로 동작한다는 점에서 다름
    <ul>
      <li><code class="language-plaintext highlighter-rouge">await</code> 키워드를 함수의 앞에 붙이면 <code class="language-plaintext highlighter-rouge">main()</code>함수는 파일 입출력이 일어나는 동안 이벤트 핸들러 같은 다른 Dart 코드들이 실행될 수 있도록 함</li>
      <li><code class="language-plaintext highlighter-rouge">await</code>는 <code class="language-plaintext highlighter-rouge">_readFileAsync()</code>의 결과로서 리턴 받은 <code class="language-plaintext highlighter-rouge">Future&lt;String&gt;</code>을 <code class="language-plaintext highlighter-rouge">String</code>으로 변환시킬 수 있기 때문에 코드에서 contents는 암시적으로 <code class="language-plaintext highlighter-rouge">String</code></li>
      <li>Dart 코드는 <code class="language-plaintext highlighter-rouge">readAsString()</code>이 런타임 혹은 OS에서 Dart가 아닌 코드를 실행하는 동안 일시 정지 → <code class="language-plaintext highlighter-rouge">readAsString()</code>이 값을 리턴하면 Dart 코드는 다시 시작</li>
    </ul>
  </li>
</ul>

<p class="notice--info">✏️ <code class="language-plaintext highlighter-rouge">await</code> 키워드는 함수의 바디 이전에 <code class="language-plaintext highlighter-rouge">async</code> 키워드를 붙여줘야 동작함</p>

<ul>
  <li><span style="color:red"> <code class="language-plaintext highlighter-rouge">await</code>가 붙은 메소드의 작업이 이뤄질 때 해당 줄에서 다트 코드는 중단되지만 사용자가 버튼을 누르는 등의 이벤트 핸들러 같은 것들은 CPU가 제어권을 가지고 처리할 수 있음 </span></li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="kt">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">'with_keys.json'</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="c1">// Read some data.</span>
  <span class="kd">final</span> <span class="n">fileData</span> <span class="o">=</span> <span class="k">await</span> <span class="n">_readFileAsync</span><span class="p">();</span>
  <span class="kd">final</span> <span class="n">jsonData</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">fileData</span><span class="p">);</span>

  <span class="c1">// Use that data.</span>
  <span class="n">print</span><span class="p">(</span><span class="s">'Number of JSON keys: </span><span class="si">${jsonData.length}</span><span class="s">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">Future</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">&gt;</span> <span class="n">_readFileAsync</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">file</span> <span class="o">=</span> <span class="n">File</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
  <span class="kd">final</span> <span class="n">contents</span> <span class="o">=</span> <span class="k">await</span> <span class="n">file</span><span class="o">.</span><span class="na">readAsString</span><span class="p">();</span>
  <span class="k">return</span> <span class="n">contents</span><span class="o">.</span><span class="na">trim</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/c6f43188-4816-42a8-80cf-0b5b55b9f6a3" alt="Screenshot 2024-06-02 at 4 19 51 PM" /></p>

<h2 id="3-streams">3. Streams</h2>
<ul>
  <li>스트림의 형태로 비동기를 지원</li>
  <li>스트림은 미래에 값들을 제공하며 반복적으로 시간에 걸쳐 값을 제공
    <ul>
      <li>예를 들어 시간의 흐름에 따라 일련의 정수 값을 제공하는 약속은 <code class="language-plaintext highlighter-rouge">Stream&lt;Int&gt;</code>의 타입을 가짐</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Stream.periodic()</code>으로 생성된 스트림이 반복적으로 정수 값을 매 초마다 만들어내는 코드</li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Stream</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">periodic</span><span class="p">(</span><span class="kd">const</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="await-for--yield">await-for &amp; yield</h3>
<ul>
  <li>새로운 값이 제공될 때마다 반복문의 순차적인 <code class="language-plaintext highlighter-rouge">Iteration</code> 실행하는 for문의 한 종류</li>
  <li>스트림에서 값을 반복적으로 뽑아내어 사용</li>
  <li><code class="language-plaintext highlighter-rouge">yield</code>는 스트림의 값을 반환하는 함수에서 <code class="language-plaintext highlighter-rouge">return</code> 대신에 사용</li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">Stream</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">sumStream</span><span class="p">(</span><span class="n">Stream</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">stream</span><span class="p">)</span> <span class="kd">async</span><span class="o">*</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">await</span> <span class="k">for</span> <span class="p">(</span><span class="kd">final</span> <span class="n">value</span> <span class="k">in</span> <span class="n">stream</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p class="notice--info">🔗 <code class="language-plaintext highlighter-rouge">async-await</code>, <code class="language-plaintext highlighter-rouge">Streams</code>, <code class="language-plaintext highlighter-rouge">Futures</code>과 같은 비동기 키워드들에 대해 더 알고 싶다면 <a href="https://dart.dev/codelabs/async-await">Asynchronous Programming Codelab</a></p>

<h1 id="3️⃣-아이솔레이트-isolates">3️⃣ 아이솔레이트 Isolates</h1>
<ul>
  <li>다트는 앞에서 언급했던 비동기 API들에 더해서 isolates를 통해서도 비동기를 지원</li>
</ul>

<h2 id="기존의-멀티스레딩">기존의 멀티스레딩</h2>
<ul>
  <li>현대에 나오는 기기들은 대부분 멀티코어 CPU를 제공하기 때문에 이 이점을 극대화하기 위해서 개발자는 동시에 실행되는 공유 메모리 스레드를 사용함
    <ul>
      <li>그러나 이러한 <strong>상태를 공유하는</strong> 동시성은 경쟁상태(race condition)를 유발할 가능성이 있고 코드도 복잡해진다는 단점이 있음</li>
    </ul>
  </li>
</ul>

<h2 id="특징">특징</h2>
<ul>
  <li>이러한 기존의 멀티스레딩의 단점을 완화하고자 Dart는 isolates를 통해 여러개의 독립적인 태스크를 수행</li>
  <li>아이솔레이트는 일종의 스레드 혹은 프로세스 같은 개념이지만 <strong>각자의 메모리를 가지면서</strong> 이벤트 루프를 실행하는 단일 스레드</li>
  <li>각각의 아이솔레이트는 <u>각각의</u> 전역 필드를 가짐: 아이솔레이트에서는 어떠한 필드도 다른 아이솔레이트들에 접근할 수 없음을 보장
    <ul>
      <li>아이솔레이트간 공유하는 필드가 없으므로 <code class="language-plaintext highlighter-rouge">Mutexes or lock</code>, <code class="language-plaintext highlighter-rouge">Data races</code> 같은 문제들이 일어날 가능성이 적어짐</li>
      <li>그러나 <strong>아이솔레이트가 경쟁상태를 완전히 방지할 수 있는 것은 아님</strong></li>
    </ul>
  </li>
  <li>각각의 아이솔레이트는 <code class="language-plaintext highlighter-rouge">Message passing</code>을 통해서만 서로 소통할 수 있음</li>
</ul>

<p class="notice--info">🔗 동시성 모델에 대한 정보를 더 얻고 싶다면 <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Mode</a>에 대한 문서를 참고</p>

<p class="notice--warning">⚠️ 오로지 다트 네이티브에서만 isolates를 사용할 수 있음. 다트 웹 플랫폼에서는 지원하지 않음.</p>

<h2 id="메인-아이솔레이트-the-main-isolate">메인 아이솔레이트 The Main Isolate</h2>
<ul>
  <li>대부분의 경우 개발자는 아이솔레이트에 대해서 생각할 필요가 없음
    <ul>
      <li>디폴트로 다트 프로그램은 메인 아이솔레이트에서 돌아가기 때문: 프로그램이 시작되어 실행됨 (하나의 아이솔레이트로 구성된 프로그램도 원활하게 동작할 수 있음)</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/dc2169fc-712e-4c3e-b86c-91c570d2990f" alt="Screenshot 2024-06-02 at 4 42 20 PM" /></p>

<ul>
  <li>다음 줄의 코드를 실행하기 전에 앱들은 비동기 작업이 완료될 때까지 기다리기 위해서 <code class="language-plaintext highlighter-rouge">async-await</code>를 사용</li>
  <li>잘 동작하는 앱은 빠르게 시작하여 가능한 한 빠르게 이벤트 루프에 도달하고 이벤트 큐에 있는 이벤트를 빠르게 처리하며 필요한 경우 비동기 작업을 수행</li>
</ul>

<h2 id="아이솔레이트의-생명주기-the-isolate-life-cycle">아이솔레이트의 생명주기 The isolate life cycle</h2>
<ul>
  <li>모든 아이솔레이트들은 <code class="language-plaintext highlighter-rouge">main()</code>과 같은 일부 다트 코드를 실행함으로써 시작
    <ul>
      <li><code class="language-plaintext highlighter-rouge">main()</code>은 사용자의 입력이나 파일 입출력과 같은 이벤트에 반응하기 위해 일부 이벤트 리스너들을 등록</li>
      <li><code class="language-plaintext highlighter-rouge">main()</code>이 리턴될 때 <strong>기본 아이솔레이트(메인 아이솔레이트)는 프로그램이 종료될 때까지 유지</strong>되며 이벤트 루프에서 이벤트를 처리</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/c12ab486-9585-440d-aad9-84705da05d07" alt="Screenshot 2024-06-02 at 4 49 55 PM" /></p>

<h2 id="이벤트-처리하기-event-handling">이벤트 처리하기 Event handling</h2>
<ul>
  <li>앱에서 메인 아이솔레이트의 이벤트 큐는 UI를 다시 그리라는 요청, 탭 등의 이벤트를 포함할 수 있음</li>
  <li>이벤트 루프는 큐에서 이벤트를 먼저 들어온 순서대로 처리</li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/75964064-321f-440e-b4ff-841e3873a1cc" alt="Screenshot 2024-06-02 at 4 54 43 PM" /></p>

<h3 id="단일-아이솔레이트메인-아이솔레이트만-사용할-때-나타날-수-있는-문제점">단일 아이솔레이트(메인 아이솔레이트)만 사용할 때 나타날 수 있는 문제점</h3>
<ul>
  <li>이벤트 처리는 <code class="language-plaintext highlighter-rouge">main()</code>이 리턴된 뒤 메인 아이솔레이트에서 일어남
    <ul>
      <li>아래 그림에서 <code class="language-plaintext highlighter-rouge">main()</code>이 리턴된 다음에 메인 아이솔레이트는 첫번째 repaint 이벤트 → 탭 이벤트 → repaint 이벤트를 처리</li>
    </ul>
  </li>
  <li><strong>만약 특정 작업이 너무 오래 걸린다면</strong> 앱은 응답하지 않을 수도 있음
    <ul>
      <li>예를 들어 탭을 처리하는 작업이 늦어지면 뒤에 있는 이벤트들이 모두 늦게 처리됨 → 앱 애니메이션이 끊긴다거나 앱이 멈춘 것처럼 보일 수 있음</li>
    </ul>
  </li>
  <li><span style="background-color:#DCFFE4">✏️ 클라이언트 앱에서 동기 작업이 너무 오래 수행되면 단일 아이솔레이트만 사용했을 때 앱이 반응이 없거나 애니메이션 끊김 현상이 나타날 수 있음</span></li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/37a205f4-ccfe-423c-a538-1c36551f8cab" alt="Screenshot 2024-06-02 at 4 59 06 PM" /></p>

<h2 id="백그라운드-아이솔레이트-background-workers">백그라운드 아이솔레이트 Background workers</h2>
<ul>
  <li>앱이 너무 오래 걸리는 작업(예: 사이즈가 큰 json 파일을 파싱)으로 인해 무반응 상태가 될 가능성이 있다면 해당 작업을 백그라운드 worker라고 불리는 worker 아이솔레이트에게 넘길 수 있음</li>
  <li>대부분의 경우 그림과 같이 간단한 worker 아이솔레이트를 생성하여 계산을 수행하고 종료</li>
  <li>worker 아이솔레이트는 종료될 때 메세지를 통해 결과를 반환</li>
</ul>

<p><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/3c516e33-6fb5-44e5-9e5a-aad82308b516" alt="Screenshot 2024-06-02 at 5 04 44 PM" /></p>

<ul>
  <li>worker 아이솔레이트는 파일 입출력, 타이머 설정과 같은 작업들을 수행</li>
  <li>자기만의 메모리를 가지며 이 메모리는 메인 아이솔레이트와 공유될 수 없음
    <ul>
      <li>worker 아이솔레이트가 작업을 수행하거나 중단될 때 메인 아이솔레이트에 영향을 주지 않음</li>
    </ul>
  </li>
</ul>

<h2 id="아이솔레이트-사용하기-2가지">아이솔레이트 사용하기 (2가지)</h2>
<h3 id="1-isolaterun">1. <code class="language-plaintext highlighter-rouge">Isolate.run()</code></h3>
<ul>
  <li>별도의 스레드에서 단일 계산을 수행할 때 사용</li>
  <li>새로 생성된 아이솔레이트가 실행할 콜백이 인자로 전달</li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">slowFib</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">n</span> <span class="p">&lt;</span><span class="o">=</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">slowFib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">slowFib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>

<span class="c1">// Compute without blocking current isolate.</span>
<span class="kt">void</span> <span class="nf">fib40</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">Isolate</span><span class="o">.</span><span class="na">run</span><span class="p">(()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">slowFib</span><span class="p">(</span><span class="mi">40</span><span class="p">));</span>
  <span class="n">print</span><span class="p">(</span><span class="s">'Fib(40) = </span><span class="si">$result</span><span class="s">'</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2-isolastespawn">2. <code class="language-plaintext highlighter-rouge">Isolaste.spawn()</code></h3>
<ul>
  <li>여러 메시지를 처리해야 되는 경우 / 백그라운드 worker을 생성할 때 사용</li>
</ul>

<p class="notice--info">📌 작업을 장기 수행하는 아이솔레이트에 관해서는 문서 참고: <a href="https://dart.dev/language/isolates">Isolates</a></p>

<h4 id="성능-최적화와-아이솔레이트-그룹">성능 최적화와 아이솔레이트 그룹</h4>
<ul>
  <li>아이솔레이트가 <code class="language-plaintext highlighter-rouge">Isolate.spawn()</code>을 호출할 때, 두 아이솔레이트는 동일한 실행 가능한 코드를 가지며 동일한 아이솔레이트 그룹에 속함
    <ul>
      <li>다트 코드가 컴파일될 때 <code class="language-plaintext highlighter-rouge">Isolate.spawn(callback)</code>에서 callback에 해당하는 메소드는 <u>이미 메모리의 코드 영역에 로드가 된 상태</u>이고 새로 생성된 아이솔레이트는 이 로드된 메소드를 호출</li>
      <li>→ 아이솔레이트 그룹을 사용하면 코드 공유와 같은 성능 최적화가 가능</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Isolate.exit()</code>는 아이솔레이트가 동일한 아이솔레이트 그룹에 있을 때만 작동</li>
</ul>

<blockquote>
  <p>“아이솔레이트는 각각의 메모리를 가진다고 했으면서 코드를 공유한다는 게 이게 뭔 소리야?” 싶었는데 Dart 코드가 컴파일될 때 모든 함수와 클래스가 메모리의 코드 영역에 로드되고, <code class="language-plaintext highlighter-rouge">Isolate.spawn()</code>를 통해 만들어진 새 아이솔레이트는 이 코드 영역에 로드된 메소드를 사용한다는 뜻이었음. <strong>성능 최적화의 측면에서 아이솔레이트 그룹이라고 표현할 뿐 메모리 자체를 공유한다는 뜻이 아님.</strong></p>
</blockquote>

<h4 id="isolatespawnuri"><code class="language-plaintext highlighter-rouge">Isolate.spawnUri()</code></h4>
<ul>
  <li>URI에 있는 코드의 복사본을 사용하여 새로운 아이솔레이트를 생성</li>
  <li>이미 메모리에 로드된 콜백 메소드를 호출하는 게 아니라 새로운 메모리 공간을 할당받기 때문에 <code class="language-plaintext highlighter-rouge">Isolate.spawn()</code>보다 느림</li>
</ul>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="s">'dart:isolate'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'dart:async'</span><span class="o">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s">'Main isolate: </span><span class="si">${Isolate.current.debugName}</span><span class="s">'</span><span class="p">);</span>
  
  <span class="c1">// 새로운 아이솔레이트 생성 (동일한 그룹 -&gt; 이미 메모리의 코드 영역에 로드된 runIsolate를 실행)</span>
  <span class="k">await</span> <span class="n">Isolate</span><span class="o">.</span><span class="na">spawn</span><span class="p">(</span><span class="n">runIsolate</span><span class="p">,</span> <span class="s">'Hello from main isolate!'</span><span class="p">);</span>

  <span class="c1">// 새로운 아이솔레이트 생성 (다른 그룹 -&gt; 새로 메모리 할당)</span>
  <span class="kd">final</span> <span class="n">uri</span> <span class="o">=</span> <span class="kt">Uri</span><span class="o">.</span><span class="na">parse</span><span class="p">(</span><span class="s">'data:text/plain,runIsolate'</span><span class="p">);</span>
  <span class="k">await</span> <span class="n">Isolate</span><span class="o">.</span><span class="na">spawnUri</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span> <span class="p">[</span><span class="s">'Hello from main isolate via URI'</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">runIsolate</span><span class="p">(</span><span class="kt">String</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="s">'New isolate: </span><span class="si">${Isolate.current.debugName}</span><span class="s">, message: </span><span class="si">$message</span><span class="s">'</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="isolates의-한계">Isolates의 한계</h2>
<h3 id="isolates는-스레드가-아님">isolates는 스레드가 아님</h3>
<ul>
  <li>아이솔레이트는 스레드처럼 동작하지 않음</li>
  <li>각각의 아이솔레이트는 자체적인 전역 필드(상태)들을 가지고 있어서 다른 아이솔레이트에서 접근할 수 없도록 보장된다는 측면에서 스레드와 다름 (자체 메모리에 대한 접근으로 제한)
    <ul>
      <li>예) 코드의 전역에서 변수를 선언했다면 이 변수는 아이솔레이트를 새로 생성했을 때 별개의 변수처럼 되어버리기 때문에 해당 아이솔레이트에서 이 변수를 변경해도 메인 아이솔레이트에서는 변경되지 않은 상태로 남아있게 됨</li>
    </ul>
  </li>
</ul>

<h2 id="메시지-타입">메시지 타입</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">SendPort</code>를 통해 보내진 메시지들은 Dart Object의 거의 대부분을 커버할 수 있지만 예외는 있음
    <ul>
      <li>Objects with native resources, such as Socket.</li>
      <li>ReceivePort</li>
      <li>DynamicLibrary</li>
      <li>Finalizable</li>
      <li>Finalizer</li>
      <li>NativeFinalizer</li>
      <li>Pointer</li>
      <li>UserTag</li>
      <li>Instances of classes that are marked with @pragma(‘vm:isolate-unsendable’)</li>
    </ul>
  </li>
  <li>예외를 제외하고는 어떠한 오브젝트도 메세지로 전달될 수 있음</li>
  <li><code class="language-plaintext highlighter-rouge">Isolate.spawn()</code>과 <code class="language-plaintext highlighter-rouge">Isolate.exit()</code>은 <code class="language-plaintext highlighter-rouge">SendPort</code>의 구현을 통해 메세지를 전달하기 때문에 위의 언급한 제한사항들이 적용</li>
</ul>

<p class="notice--info">🔗 참고: <a href="https://api.dart.dev/stable/3.4.2/dart-isolate/SendPort/send.html">Dart - SendPort</a></p>

<h1 id="4️⃣-웹에서의-동시성">4️⃣ 웹에서의 동시성</h1>
<ul>
  <li>다트 웹은 이러한 <code class="language-plaintext highlighter-rouge">async-await</code>, <code class="language-plaintext highlighter-rouge">Future</code>, <code class="language-plaintext highlighter-rouge">Stream</code>을 사용할 수 없음</li>
  <li><code class="language-plaintext highlighter-rouge">Web worker</code>라는 걸 사용해야 하는데 이 웹 워커는 아이솔레이트의 기능과 약간 다름</li>
  <li>예) <code class="language-plaintext highlighter-rouge">Web worker</code>는 스레드 간 데이터를 전송할 때 데이터를 복사
    <ul>
      <li>아이솔레이트도 이렇게 데이터를 복사하는 건 똑같지만 메시지를 보관하는 메모리를 더 효율적으로 전송할 수 있는 API가 있다는 점에서 다름</li>
    </ul>
  </li>
</ul>

<h1 id="5️⃣-resources">5️⃣ Resources</h1>
<ul>
  <li>다수의 아이솔레이트를 사용하는 경우 <code class="language-plaintext highlighter-rouge">IsolateNameServer</code>를 고려</li>
  <li>🔗 참고 자료
    <ul>
      <li><a href="https://api.dart.dev/stable/dart-isolate/Isolate/exit.html">Isolate.exit()</a></li>
      <li><a href="https://api.dart.dev/stable/dart-isolate/Isolate/spawn.html">Isolate.spawn()</a></li>
      <li><a href="https://api.dart.dev/stable/dart-isolate/ReceivePort-class.html">ReceivePort</a></li>
      <li><a href="https://api.dart.dev/stable/dart-isolate/SendPort-class.html">SendPort</a></li>
    </ul>
  </li>
</ul>

<hr />

<p>읽고 정리해보고 싶은 문서가 몇 개 있는데 요것들도 정리해서 올려보려고 함</p>

<ol>
  <li>Dart에서 Isolates를 어떻게 활용하는지에 대한 문서 <a href="https://dart.dev/language/isolates">Dart - Isolates</a></li>
  <li>Flutter에서 이 Isolates로 동시성을 어떻게 해결하는지에 대한 문서 <a href="https://docs.flutter.dev/perf/isolates#message-passing-between-isolates">Flutter - Concurrency and isolates</a></li>
</ol>

<p>궁극적으로는 이 아티클 <a href="https://medium.com/flutter/executing-dart-in-the-background-with-flutter-plugins-and-geofencing-2b3e40a1a124">Executing Dart in the Background with Flutter Plugins and Geofencing</a>을 이해하고픈 욕심은 있는데 잘 모르겠다…</p>

<p>플러터는 써드파티 라이브러리가 엄청 많은데 이게 오히려 좋은건지 잘 모르겠음<br />
어떻게 쓰는지도 모르고 그냥 문서 보고 대충 갖다 붙이는 느낌이라 🤔<br />
백그라운드 작업 좀 이해해보겠다고 시작하긴 했는데 뭐가 어떻게 도움이 될 지는 잘 모르겠다</p>]]></content><author><name>segyoung</name><email>sseymorrr@gmail.com</email></author><category term="[&quot;flutter&quot;, &quot;dart&quot;]" /><summary type="html"><![CDATA[동시성에 관한 다트 공식 문서 번역글: async-await, Future, Stream, Isolates]]></summary></entry><entry><title type="html">[Xcode] 개발용 인증서를 만들고 실제 기기에서 테스트 해보기</title><link href="http://localhost:4000/ios/xcode/xcode-development-certificate/" rel="alternate" type="text/html" title="[Xcode] 개발용 인증서를 만들고 실제 기기에서 테스트 해보기" /><published>2024-05-28T00:00:00+09:00</published><updated>2024-05-28T00:00:00+09:00</updated><id>http://localhost:4000/ios/xcode/xcode-development-certificate</id><content type="html" xml:base="http://localhost:4000/ios/xcode/xcode-development-certificate/"><![CDATA[<p align="center"><img width="300" height="300" src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/2f7c3653-d46e-4c4c-8042-15d4ee3a3a15" /></p>

<p>안드로이드 개발해본 사람은 알겠지만 안드로이드 네이티브는 실제 기기를 통해 테스트하며 디버깅하는 과정이 매우 간단함</p>

<p>그냥 컴퓨터에 폰을 연결하면 끝 👍<br />
안드로이드 스튜디오가 알아서 기기를 인식하기 때문에 코드를 바로 해당 기기에서 실행할 수 있음</p>

<p><span style="font-size:150%"><strong>그런데</strong></span> ios는 안드로이드처럼 그냥 컴퓨터에 기기 연결해서 바로바로 디버깅을 할 수 없음</p>

<center>처음엔 이게 너무 당황스러웠음... </center>
<blockquote>
  <p>“아니 고작 디버깅 하나 하겠다는데 이렇게까지 까다로워야 하나?”</p>
</blockquote>

<p>싶겠지만… 일단 애플은 개발 중인 앱이더라도 이 앱의 안전성이 증명된 후 인증된 기기에서만 실행이 가능하다는 것만 염두에 두고 시작해보자!</p>

<p class="notice--info">‼️ 이 글은 애플 개발자 사이트에서 앱 번들 ID가 추가되었음을 가정하고 작성됨</p>

<h2 id="1️⃣-필요한-준비물">1️⃣ 필요한 준비물</h2>
<p><strong><span style="background-color:yellow">1. CSR</span></strong></p>
<ul>
  <li>애플에서 발급해주는 개발자 인증서</li>
  <li>인증서를 발급받기 위해 필요한 일종의 자격 증명</li>
</ul>

<p class="notice--primary">📌 참고: 이 파일을 통해 인증서를 만들어 keychain access에 저장하게 되면 공개키 - 개인 키 쌍이 자동으로 생성되는데 이 개인키는 개발하는 개발자들끼리 공유하여 사용하게 됨 (개인 키가 없으면 인증서 사용 불가)</p>

<p><strong><span style="background-color:yellow">2. 인증서</span></strong></p>
<ul>
  <li>내가 만드는 앱의 안전성과 신뢰성이 보장됨을 증명하는 애플로부터 받는 인증서</li>
  <li>CSR을 통해 만들 수 있음</li>
</ul>

<blockquote>
  <p>이 단계에서 “음? 그럼 이제 앱이 빌드되겠지?” 라고 생각하면 오산이고요</p>
</blockquote>

<p>아까 안드로이드는 <strong>아무 기기</strong>나 컴퓨터에 연결해서 바로 디버깅을 해볼 수 있다 했으니 iOS는 뭔가 다르겠죠?<br />
바로 <strong>앱을 실행할 수 있는 기기 정보에 대한 파일이 따로 필요</strong>함</p>

<p><strong><span style="background-color:yellow">3. 프로비져닝 프로파일</span></strong></p>
<ul>
  <li>개발 중인 앱이 실행될 수 있는 기기에 대한 정보(+α)가 들어있음</li>
  <li>개발용으로 코드를 디버깅 할 때 <strong>인증된 기기만</strong> 앱을 실행시킬 수 있기 때문</li>
</ul>

<hr />

<p>ios 앱을 개발하는 데 있어서 필요한 인증서는 2가지!</p>
<ol>
  <li>개발용 인증서: 개발 시 실제 기기에서 디버깅 할 때 필요</li>
  <li>배포용 인증서: 앱스토어에 앱을 배포할 때 필요</li>
</ol>

<p>배포용 인증서에 관해서는 Archive와 함께 따로 정리할 거라 오늘은 일단 개발용 인증서로 코드를 빌드하고 실제 기기에서 테스트할 수 있도록 하는 것이 목표임!!!</p>

<h2 id="2️⃣-automatically-manage-signing이란">2️⃣ Automatically manage signing이란?</h2>
<p>Xcode에서 앱 서명은 <code class="language-plaintext highlighter-rouge">signing &amp; capability</code> 탭에서 관리하는데, 이 탭에서 <code class="language-plaintext highlighter-rouge">Automatically manage signing</code> 체크 옵션부터 확인해보자.</p>

<p>이 옵션을 활성화하면 위에 언급한 인증서와 프로파일을 <span style="color:red">Xcode가 자동으로 생성</span>해준다.</p>

<blockquote>
  <p>“편리하고 좋은데 그냥 인증서 같은 거 만들지 말고 이 옵션을 적극 활용하면 안될까요?”</p>
</blockquote>

<p>여러번 언급했지만 <strong>실제 기기에서</strong> 테스트해보고 싶으면 이 체크 옵션을 무조건 해제하고 따로 인증서를 꼭 만들어줘야 함<br />
<strong>안 그러면 에뮬레이터에서만 돌아감… 😇</strong></p>

<h2 id="3️⃣-개발용-인증서-만들기">3️⃣ 개발용 인증서 만들기</h2>

<p class="notice--info">✋ 애플 개발자 계정 만드는 과정은 생략</p>

<h3 id="1-csr-파일-만들기">1. CSR 파일 만들기</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Keychain Access</code> → <code class="language-plaintext highlighter-rouge">Certificate Assistant</code> → <code class="language-plaintext highlighter-rouge">Request a Certificate From a Certificate Authority</code> 
  <img width="694" alt="Screenshot 2024-05-29 at 7 11 08 PM" src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/0e7bf735-3b96-44c4-bdc7-cb908604c8eb" /></li>
  <li>
    <p>이메일과 이름을 적고 <code class="language-plaintext highlighter-rouge">Saved to disk</code>와 <code class="language-plaintext highlighter-rouge">Let me specify key pair information</code> 옵션을 체크 활성화한 뒤 <code class="language-plaintext highlighter-rouge">continue</code><br />
  <img width="634" alt="Screenshot 2024-05-29 at 16 45 50" src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/c251da85-4637-4683-94cc-97606aa084b7" />
  <img width="634" alt="Screenshot 2024-05-29 at 16 46 27" src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/c9947596-8268-4b83-8d45-04592076ec05" /></p>
  </li>
  <li>CSR 파일 저장된 것 확인 <code class="language-plaintext highlighter-rouge">.CertificateSigningRequest</code></li>
</ul>

<h3 id="2-인증서-만들기">2. 인증서 만들기</h3>
<p>2가지 방법을 통해 만들 수 있는데, 개인적으로는 Xcode에서 연동된 계정을 통해 만드는 게 가장 확실한 방법 같다.<br />
모두 정리해놓을 거긴 하지만 <strong>그냥 xcode에서 만드는 것이 정신건강에 이롭다👍</strong></p>

<h4 id="1-xcode에서-인증서-만들기">1) xcode에서 인증서 만들기</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Xcode</code> → <code class="language-plaintext highlighter-rouge">Accounts</code> → 애플 개발자 계정으로 로그인<br />
  <img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/b52ddf4a-b3a7-46a7-9e6c-8965b948e96c" alt="Screenshot 2024-05-29 at 14 49 17" /></li>
  <li>좌측 하단 <code class="language-plaintext highlighter-rouge">+</code> 버튼 → <code class="language-plaintext highlighter-rouge">Apple Development</code> 클릭
  <img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/d248ed12-7a9b-4b18-810c-de9203380b2a" alt="Screenshot 2024-05-29 at 14 51 55" /><br />
  <img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/35229249-38e8-443a-8e7d-bc1ea6cb6bdb" alt="Screenshot 2024-05-29 at 14 53 16" /></li>
  <li>애플 개발자 계정 → <code class="language-plaintext highlighter-rouge">Certificates, Identifiers &amp; Profiles</code>에 새 인증서가 추가된 것을 확인
  <img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/034f5e74-acc7-437e-bd2d-8c577b00710d" alt="photo_2024-05-29 19 24 16" /></li>
</ul>

<h4 id="2-애플-개발자-사이트에서-인증서-만들기">2) 애플 개발자 사이트에서 인증서 만들기</h4>
<ul>
  <li>애플 개발자 계정 → <code class="language-plaintext highlighter-rouge">Certificates, Identifiers &amp; Profiles</code> → <code class="language-plaintext highlighter-rouge">+</code> 버튼 클릭
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/17d31a7e-f072-4a43-8e98-cb4dc11d7398" alt="photo_2024-05-29 19 24 24" /></li>
  <li><code class="language-plaintext highlighter-rouge">Software</code> → <code class="language-plaintext highlighter-rouge">Apple Development</code> 체크한 뒤 필요한 서비스 체크 → <code class="language-plaintext highlighter-rouge">continue</code>
    <ul>
      <li>만약 앱에 푸쉬 알림 기능이 있다면 <code class="language-plaintext highlighter-rouge">Apple Push Notification service SSL (Sandbox)</code> 체크하여 진행: 일단 코드를 기기에서 빌드하는 게 목적이라면 Services는 체크하지 않고 넘어가도 됨! 
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/0b88d3de-0f46-4de2-80fc-9c8df21ad6a5" alt="Certificates, Identifiers   Profiles - Apple Developer copy" /></li>
    </ul>
  </li>
  <li>앞에서 만든 CSR 파일을 첨부한 뒤 <code class="language-plaintext highlighter-rouge">continue</code>
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/aa7c20db-6870-4666-9c75-a4254c7663ed" alt="Screenshot 2024-05-30 at 09 12 14" /></li>
  <li>인증서를 다운로드 받은 뒤 <code class="language-plaintext highlighter-rouge">더블 클릭</code>하면 <code class="language-plaintext highlighter-rouge">Keychain access</code>에 새로운 인증서가 추가된 것을 확인할 수 있음!
    <ul>
      <li>공개키 + 개인키 한 쌍이 존재해야 하고 하단 개인 키가 없으면 인증서 사용 불가
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/657ed1e3-9fb9-49f9-9b21-67b831474d2e" alt="Screenshot 2024-05-30 at 09 13 57" /></li>
    </ul>
  </li>
</ul>

<h3 id="3-프로비져닝-프로파일-설정하기">3. 프로비져닝 프로파일 설정하기</h3>
<p>먼저 애플 개발자 사이트에 <strong>기기 등록</strong>부터 해야됨<br />
애플 개발자 사이트에서 <code class="language-plaintext highlighter-rouge">Devices</code>탭에 들어간 뒤 <code class="language-plaintext highlighter-rouge">+</code> 버튼 눌러 UDID를 추가</p>

<p class="notice--primary">📌 UDID(unique device identifier): 애플 기기에 할당되는 유일한 24글자의 문자열</p>
<p class="notice--danger">✋ 기기 등록 수가 제한되어 있는 애플 개발자 서비스를 사용하는 경우 기기 추가 시 24 ~ 72시간이 소요될 수 있음</p>

<h4 id="1-이미-개발용-프로파일이-생성되어-있는-경우">1) 이미 개발용 프로파일이 생성되어 있는 경우</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Profiles</code> 접속하여 만들어 놓은 프로파일 클릭 → <code class="language-plaintext highlighter-rouge">Edit</code> → <code class="language-plaintext highlighter-rouge">Devices</code>에서 추가한 기기를 체크 활성화
 <img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/255549ae-2e11-47d6-821c-125d6824b158" alt="Screenshot 2024-05-30 at 09 31 46" /></li>
</ul>

<h4 id="2-새로-프로파일을-만들어야-하는-경우">2) 새로 프로파일을 만들어야 하는 경우</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Profiles</code> 접속 → <code class="language-plaintext highlighter-rouge">+</code>버튼 → <code class="language-plaintext highlighter-rouge">iOS App Development</code> 체크 → <code class="language-plaintext highlighter-rouge">continue</code>
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/e1106d33-0357-4925-8f39-a2b48c82eceb" alt="Screenshot 2024-05-30 at 09 33 21" /></li>
  <li>만든 앱의 번들 id를 선택한 뒤 <code class="language-plaintext highlighter-rouge">continue</code>
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/f1accb6b-21ef-4472-9254-d28e7772e068" alt="Screenshot 2024-05-30 at 09 34 54" /></li>
  <li>만들었던 인증서를 선택한 뒤 <code class="language-plaintext highlighter-rouge">continue</code>
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/36c5e120-f5c6-4a31-aa0b-b33c65c2bb23" alt="Screenshot 2024-05-30 at 09 39 00" /></li>
  <li>해당 앱을 실행하고 싶은 기기를 모두 선택한 뒤 <code class="language-plaintext highlighter-rouge">continue</code>
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/190ff7be-3705-4c0b-a945-2d69d190ebd0" alt="Screenshot 2024-05-30 at 09 39 57" /></li>
  <li>프로파일 이름을 설정한 뒤 <code class="language-plaintext highlighter-rouge">generate</code>
<img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/1e6b6c36-ccaa-49d4-b078-58b21bd6613c" alt="Screenshot 2024-05-30 at 09 41 30" /></li>
  <li>만든 프로파일을 다운로드 받은 뒤 Xcode의 <code class="language-plaintext highlighter-rouge">signing &amp; capability</code>에서 <code class="language-plaintext highlighter-rouge">Import Profile</code> → 다운로드 받은 프로파일을 선택하면 세팅 끝!</li>
</ul>

<p class="notice--danger">✋ <strong>개발용 프로파일의 경우 테스트하고 싶은 기기가 새로 추가될 때마다 프로파일을 수정하여 다운로드 받은 뒤 다시 Xcode에서 import 해야함</strong> <del>(왜 이렇게 불편하게 만들었는지 모르겠다)</del></p>

<p>여기까지 따라왔다면 Xcode의 <code class="language-plaintext highlighter-rouge">signing &amp; capability</code> → <code class="language-plaintext highlighter-rouge">Debug</code> 탭에서 헤맬 일은 없을 것 같다!</p>

<p>당장 iOS 앱을 실제 기기에서 실행해보고 싶은데 인증서 때문에 어려움을 겪었던 분들께 도움이 되는 글이었기를 바라며…</p>

<p>현재 진행하고 있는 프로젝트의 앱을 배포해야되는 시점에 배포용 인증서와 관련해 글을 또 써보려고 하니 기대해주세용</p>

<p>잘못된 정보가 있다면 언제든지 피드백 부탁드립니다:)</p>]]></content><author><name>segyoung</name><email>sseymorrr@gmail.com</email></author><category term="[&quot;ios&quot;, &quot;xcode&quot;]" /><category term="xcode" /><category term="앱 배포" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[Flutter Web] 이미지를 받아와 크롭하기</title><link href="http://localhost:4000/flutter/solutions/image-crop-in-flutter-web/" rel="alternate" type="text/html" title="[Flutter Web] 이미지를 받아와 크롭하기" /><published>2024-05-17T00:00:00+09:00</published><updated>2024-05-17T00:00:00+09:00</updated><id>http://localhost:4000/flutter/solutions/image-crop-in-flutter-web</id><content type="html" xml:base="http://localhost:4000/flutter/solutions/image-crop-in-flutter-web/"><![CDATA[<h3 id="1️⃣-목표">1️⃣ 목표</h3>
<p>flutter 라이브러리를 사용하여 파일 시스템에서 이미지를 받아온 뒤 이미지를 자른 후 화면에 노출시키기</p>

<h3 id="2️⃣-사용한-라이브러리">2️⃣ 사용한 라이브러리</h3>
<ol>
  <li>image_picker_web: <a href="https://pub.dev/packages/image_picker_web">https://pub.dev/packages/image_picker_web</a></li>
  <li>image_cropper: <a href="https://pub.dev/packages/image_cropper">https://pub.dev/packages/image_cropper</a></li>
</ol>

<h3 id="3️⃣-기본-세팅">3️⃣ 기본 세팅</h3>
<h4 id="1-pubspecyaml">1. pubspec.yaml</h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">flutter</span><span class="pi">:</span>
    <span class="na">sdk</span><span class="pi">:</span> <span class="s">flutter</span>
  <span class="na">image_picker_web</span><span class="pi">:</span> <span class="s">^3.1.1</span>
  <span class="na">http</span><span class="pi">:</span> <span class="s">^0.13.5</span>
  <span class="na">image_cropper</span><span class="pi">:</span> <span class="s">^3.0.1</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="2-webindexhtml">2. web/index.html</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;head&gt;</span>
  <span class="c">&lt;!-- Croppie --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.css"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;script </span><span class="na">defer</span> <span class="na">src=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/exif-js/2.3.0/exif.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="-주의-사항"><img width="25" alt="star1" src="https://user-images.githubusercontent.com/78655692/151471925-e5f35751-d4b9-416b-b41d-a059267a09e3.png" /> 주의 사항</h3>
<p class="notice--warning">플러터 웹에서 로컬 파일 시스템에 직접 접근하는 것(File 형태로)은 보안상의 이유로 허용되지 않으므로 blob 형태의 url로 변환해야 함.</p>
<h3 id="4️⃣-전체-소스-코드-maindart">4️⃣ 전체 소스 코드 (main.dart)</h3>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="s">'dart:html'</span> <span class="k">as</span> <span class="n">html</span><span class="o">;</span>

<span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:image_cropper/image_cropper.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:image_picker_web/image_picker_web.dart'</span><span class="o">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">runApp</span><span class="p">(</span><span class="kd">const</span> <span class="n">MyApp</span><span class="p">());</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">MyApp</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">MyApp</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">});</span>

  <span class="c1">// This widget is the root of your application.</span>
  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">const</span> <span class="n">MaterialApp</span><span class="p">(</span>
      <span class="nl">title:</span> <span class="s">'Flutter Demo'</span><span class="p">,</span>
      <span class="nl">home:</span> <span class="n">MyHomePage</span><span class="p">(</span><span class="nl">title:</span> <span class="s">'Image cropper! 🍏'</span><span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">MyHomePage</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="n">MyHomePage</span><span class="p">({</span><span class="k">super</span><span class="o">.</span><span class="na">key</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="p">});</span>

  <span class="kd">final</span> <span class="kt">String</span> <span class="n">title</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="n">State</span><span class="p">&lt;</span><span class="n">MyHomePage</span><span class="p">&gt;</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_MyHomePageState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_MyHomePageState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">MyHomePage</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kt">String</span> <span class="n">croppedBlobUrl</span> <span class="o">=</span> <span class="s">''</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="s">''</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
        <span class="nl">backgroundColor:</span> <span class="n">Theme</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">colorScheme</span><span class="o">.</span><span class="na">inversePrimary</span><span class="p">,</span>
        <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="n">widget</span><span class="o">.</span><span class="na">title</span><span class="p">),</span>
      <span class="p">),</span>
      <span class="nl">body:</span> <span class="n">SingleChildScrollView</span><span class="p">(</span>
        <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">vertical</span><span class="p">,</span>
        <span class="nl">child:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
            <span class="nl">crossAxisAlignment:</span> <span class="n">CrossAxisAlignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Padding</span><span class="p">(</span>
                <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mf">15.0</span><span class="p">),</span>
                <span class="nl">child:</span> <span class="n">SizedBox</span><span class="p">(</span>
                  <span class="nl">width:</span> <span class="mi">300</span><span class="p">,</span>
                  <span class="nl">height:</span> <span class="mi">300</span><span class="p">,</span>
                  <span class="nl">child:</span> <span class="n">croppedBlobUrl</span> <span class="o">!=</span> <span class="s">''</span>
                      <span class="o">?</span> <span class="n">CircleAvatar</span><span class="p">(</span>
                          <span class="nl">radius:</span> <span class="mi">50</span><span class="p">,</span> <span class="c1">// 원하는 크기 지정</span>
                          <span class="nl">backgroundColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">transparent</span><span class="p">,</span>
                          <span class="nl">backgroundImage:</span> <span class="n">NetworkImage</span><span class="p">(</span><span class="n">croppedBlobUrl</span><span class="p">),</span>
                        <span class="p">)</span>
                      <span class="o">:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">disabled_by_default_rounded</span><span class="p">),</span>
                <span class="p">),</span>
              <span class="p">),</span>
              <span class="n">ElevatedButton</span><span class="o">.</span><span class="na">icon</span><span class="p">(</span>
                  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
                    <span class="n">pickAndCropImage</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
                  <span class="p">},</span>
                  <span class="nl">icon:</span> <span class="kd">const</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">image</span><span class="p">),</span>
                  <span class="nl">label:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'pick an image from gallery'</span><span class="p">))</span>
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span> 
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">pickAndCropImage</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="n">html</span><span class="o">.</span><span class="na">File</span><span class="o">?</span> <span class="n">imageFile</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="n">ImagePickerWeb</span><span class="o">.</span><span class="na">getMultiImagesAsFile</span><span class="p">())</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">imageFile</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fileName</span> <span class="o">=</span> <span class="n">imageFile</span><span class="o">.</span><span class="na">name</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="na">mounted</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">cropImage</span><span class="p">(</span><span class="n">imageFile</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">cropImage</span><span class="p">(</span><span class="n">html</span><span class="o">.</span><span class="na">File</span> <span class="n">imageFile</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">imageUrl</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="na">Url</span><span class="o">.</span><span class="na">createObjectUrlFromBlob</span><span class="p">(</span><span class="n">imageFile</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">croppedFile</span> <span class="o">=</span> <span class="k">await</span> <span class="n">ImageCropper</span><span class="p">()</span><span class="o">.</span><span class="na">cropImage</span><span class="p">(</span>
      <span class="nl">sourcePath:</span> <span class="n">imageUrl</span><span class="p">,</span>
      <span class="nl">aspectRatioPresets:</span> <span class="p">[</span>
        <span class="n">CropAspectRatioPreset</span><span class="o">.</span><span class="na">square</span><span class="p">,</span>
        <span class="n">CropAspectRatioPreset</span><span class="o">.</span><span class="na">ratio3x2</span><span class="p">,</span>
        <span class="n">CropAspectRatioPreset</span><span class="o">.</span><span class="na">original</span><span class="p">,</span>
        <span class="n">CropAspectRatioPreset</span><span class="o">.</span><span class="na">ratio4x3</span><span class="p">,</span>
        <span class="n">CropAspectRatioPreset</span><span class="o">.</span><span class="na">ratio16x9</span>
      <span class="p">],</span>
      <span class="nl">uiSettings:</span> <span class="p">[</span><span class="n">WebUiSettings</span><span class="p">(</span><span class="nl">context:</span> <span class="n">context</span><span class="p">)],</span>
    <span class="p">);</span>

    <span class="n">html</span><span class="o">.</span><span class="na">Url</span><span class="o">.</span><span class="na">revokeObjectUrl</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">);</span>

    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">croppedFile</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">croppedBlobUrl</span> <span class="o">=</span> <span class="n">croppedFile</span><span class="o">.</span><span class="na">path</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="5️⃣-동작-확인">5️⃣ 동작 확인</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">flutter</span><span class="w"> </span><span class="nx">build</span><span class="w"> </span><span class="nx">web</span><span class="w">
</span><span class="n">flutter</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">chrome</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="6️⃣-결과물">6️⃣ 결과물</h3>
<center><img width="600" src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/edf9762b-b855-4ff4-ae31-65321a69490d" /></center>]]></content><author><name>segyoung</name><email>sseymorrr@gmail.com</email></author><category term="[&quot;flutter&quot;, &quot;solutions&quot;]" /><summary type="html"><![CDATA[플러터 웹에서 이미지를 가져와 크롭해보자!]]></summary></entry><entry><title type="html">[GitHub Pages] minimal-mistakes 테마에서 카테고라이징 하기</title><link href="http://localhost:4000/git/solutions/categorize-in-minimal-mistakes/" rel="alternate" type="text/html" title="[GitHub Pages] minimal-mistakes 테마에서 카테고라이징 하기" /><published>2024-05-17T00:00:00+09:00</published><updated>2024-05-17T00:00:00+09:00</updated><id>http://localhost:4000/git/solutions/categorize-in-minimal-mistakes</id><content type="html" xml:base="http://localhost:4000/git/solutions/categorize-in-minimal-mistakes/"><![CDATA[<h3 id="1️⃣-목표">1️⃣ 목표</h3>
<p>jekyll minimal-mistakes 테마에서 이중으로 카테고리를 분류해보기</p>
<blockquote>
  <p>이렇게! 😀</p>
</blockquote>
<p align="center"><img width="226" alt="Screenshot 2024-05-29 at 7 33 32 PM" src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/53f03224-a1bf-4466-8469-f5b73adc02cc" /></p>

<h3 id="2️⃣-기본-세팅">2️⃣ 기본 세팅</h3>
<h4 id="1-indexhtml">1. index.html</h4>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">home</span>
<span class="na">author_profile</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">sidebar</span><span class="pi">:</span>
    <span class="na">nav</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sidebar-category"</span> <span class="s">⬅️ 추가된 부분</span>
<span class="nn">---</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="2-_configyml">2. _config.yml</h4>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1"># Defaults</span>
<span class="na">defaults</span><span class="pi">:</span>
  <span class="c1"># _posts</span>
  <span class="pi">-</span> <span class="na">scope</span><span class="pi">:</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">posts</span>
    <span class="na">values</span><span class="pi">:</span>
      <span class="na">layout</span><span class="pi">:</span> <span class="s">single</span>
      <span class="na">author_profile</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">read_time</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">comments</span><span class="pi">:</span> <span class="c1"># true</span>
      <span class="na">share</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">related</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">sidebar</span><span class="pi">:</span>
        <span class="na">nav</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sidebar-category"</span> <span class="c1"># 추가된 부분</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3️⃣-카테고리-설정하기">3️⃣ 카테고리 설정하기</h3>
<h4 id="1-_datanavigationyml">1. _data/navigation.yml</h4>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre> <span class="na">sidebar-category</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">🖤</span><span class="nv"> </span><span class="s">flutter"</span>
    <span class="na">children</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">🚫</span><span class="nv"> </span><span class="s">errors"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">flutter/errors/"</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">😎</span><span class="nv"> </span><span class="s">solutions"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">flutter/solutions/"</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">🖤</span><span class="nv"> </span><span class="s">ios"</span>
    <span class="na">children</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">✨</span><span class="nv"> </span><span class="s">swift"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ios/swift/"</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">🚫</span><span class="nv"> </span><span class="s">errors"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ios/errors/"</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">😎</span><span class="nv"> </span><span class="s">solutions"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ios/solutions/"</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="2-_pages-폴더">2. _pages 폴더</h4>
<p>_pages 폴더 하위에 카테고리에 맞춰 폴더 생성 뒤 각 카테고리를 선택했을 때 보여줄 화면 추가</p>
<ul>
  <li>폴더 구조</li>
</ul>

<p align="center"><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/67f70570-b8f2-43f0-ab31-8d25ec42f9cb" /></p>

<ul>
  <li>예를 들어 ios/solutions 카테고리를 클릭했을 때 보여질 화면의 코드</li>
</ul>

<p class="notice--info">ios 카테고리에도 포함되고, solutions 카테고리에도 포함된 글들만 가져오는 liquid문을 추가</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>
{% assign posts_with_flutter = site.posts | where: "categories", "flutter" %}
{% assign posts_with_flutter_and_solutions = posts_with_flutter | where: "categories", "solutions" %}

{% for post in posts_with_flutter_and_solutions %}
  {% include archive-single.html type=page.entries_layout %}
{% endfor %}

</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">😎</span><span class="nv"> </span><span class="s">flutter</span><span class="nv"> </span><span class="s">/</span><span class="nv"> </span><span class="s">solutions"</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">category</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/flutter/solutions/</span>
<span class="na">author_profile</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">sidebar_main</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">types</span><span class="pi">:</span> <span class="s">posts</span>
<span class="na">taxonomy</span><span class="pi">:</span>
  <span class="na">category</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">flutter</span>
    <span class="pi">-</span> <span class="s">solutions</span>
<span class="na">sidebar</span><span class="pi">:</span>
  <span class="na">nav</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sidebar-category"</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="kc">true</span>
<span class="nn">---</span>

{% assign posts_with_flutter = site.posts | where: "categories", "flutter" %}
{% assign posts_with_flutter_and_solutions = posts_with_flutter | where: "categories", "solutions" %}

{% for post in posts_with_flutter_and_solutions %}
  {% include archive-single.html type=page.entries_layout %}
{% endfor %}

</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="3-_posts-폴더">3. _posts 폴더</h4>
<p>루트 폴더에 하위에 카테고리에 맞춰 폴더 추가한 뒤 해당 카테고리 하위에 _posts 폴더 추가</p>
<ul>
  <li>예를 들어 ios/solutions에 해당하는 카테고리에 글을 추가하는 경우 다음과 같이 폴더를 만든 뒤 _post에 <strong>yyyy-mm-dd-글제목.md</strong> 형태로 글을 추가</li>
</ul>

<p align="center"><img src="https://github.com/sseymorr/sseymorr.github.io/assets/169756711/fde6c4c7-3a5f-4673-ae7e-e79c8698f4c8" /></p>

<h3 id="4️⃣-결과">4️⃣ 결과</h3>
<p>flutter/solutions 카테고리를 클릭했을 때 1) flutter 2) solutions <strong>두 개의 카테고리가 모두 설정된 글들만</strong> 선택되어 노출된다! 😎</p>]]></content><author><name>segyoung</name><email>sseymorrr@gmail.com</email></author><category term="[&quot;git&quot;, &quot;solutions&quot;]" /><category term="minimal-mistakes" /><category term="GitHubPages" /><summary type="html"><![CDATA[jekyll minimal-mistakes 테마에서 카테고리를 이중으로 분류해보자!]]></summary></entry></feed>